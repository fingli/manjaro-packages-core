# Based on the file created for Arch Linux by:
# Tobias Powalowski <tpowa@archlinux.org>
# Thomas Baechler <thomas@archlinux.org>

# Maintainer: Philip MÃ¼ller <philm@manjaro.org>
# Maintainer: Guinux <guillaume@manjaro.org>

pkgbase=linux313
pkgname=('linux313' 'linux313-headers')
_kernelname=-MANJARO
_basekernel=3.13
_basever=313
_aufs=20141215 #last version
_bfq=v7r8
_subver=34
pkgver=${_basekernel}.11.${_subver}
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-${_basekernel}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${_basekernel}.11.xz"
        # the main kernel config files
        'config' 'config.x86_64' 'config.aufs'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        "aufs3.13-${_aufs}.patch.bz2"
        'aufs3-base.patch'
        'aufs3-kbuild.patch'
        'aufs3-loopback.patch'
        'aufs3-mmap.patch'
        'aufs3-standalone.patch'
        'aufs313-3.13.11.14.patch'
        'tmpfs-idr.patch'
        'vfs-ino.patch'
        'change-default-console-loglevel.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/linux-patches/genpatches-2.6/trunk/3.11/1700_enable-thinkpad-micled.patch'
        '2700_ThinkPad-30-brightness-control-fix.patch'
        'criu-no-expert.patch'
        # ARCH patches
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0001-syscalls.h-use-gcc-alias-instead-of-assembler-aliase.patch'
        '0004-rpc_pipe-remove-the-clntXX-dir-if-creating-the-pipe-.patch'
        '0005-sunrpc-add-an-info-file-for-the-dummy-gssd-pipe.patch'
        '0006-rpc_pipe-fix-cleanup-of-dummy-gssd-directory-when-no.patch'
        'i8042-fix-aliases.patch'
        '3.13.11.1.patch'
        '3.13.11.3.patch'
        '3.13.11.4.patch'
        '3.13.11.5.patch'
        '3.13.11.6.patch'
        '3.13.11.7.patch'
        '3.13.11.8.patch'
        '3.13.11.9.patch'
        '3.13.11.10.patch'
        '3.13.11.11.patch'
        '3.13.11.12.patch'
        '3.13.11.13.patch'
        '3.13.11.14.patch'
        '3.13.11.15.patch'
        '3.13.11.16.patch'
        '3.13.11.17.patch'
        '3.13.11.18.patch'
        '3.13.11.19.patch'
        '3.13.11.20.patch'
        '3.13.11.21.patch'
        '3.13.11.22.patch'
        '3.13.11.23.patch'
        '3.13.11.24.patch'
        '3.13.11.25.patch'
        '3.13.11.26.patch'
        '3.13.11.27.patch'
        '3.13.11.28.patch'
        '3.13.11.29.patch'
        '3.13.11.30.patch'
        '3.13.11.31.patch'
        '3.13.11.32.patch'
        '3.13.11.33.patch'
        '3.13.11.34.patch'
        "0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}.patch::ftp://teambelgium.net/bfq/patches/3.13.0-${_bfq}/0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}-3.13.patch"
        "0002-block-introduce-the-BFQ-${_bfq}-I-O-sched.patch::ftp://teambelgium.net/bfq/patches/3.13.0-${_bfq}/0002-block-introduce-the-BFQ-${_bfq}-I-O-sched-for-3.13.patch"
        "0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}.patch::ftp://teambelgium.net/bfq/patches/3.13.0-${_bfq}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}-for-3.13.0.patch"
)
sha256sums=('4d5e5eee5f276424c32e9591f1b6c971baedc7b49f28ce03d1f48b1e5d6226a2'
            '0c481b0abee4ba6779fe168f98dcca6481a033d393d66ff6b9caaed7f0307231'
            '9d329621c1f241163ecf8f92308660d20aa0932ec11e49c4ef2d0893bebfc8d7'
            '1567599cf56c67a369bf5423a1681e1e4716800628db2b94072f7f196adc8bce'
            'd1cecc720df66c70f43bdb86e0169d6b756161c870db8d7d39c32c04dc36ed36'
            '45602d7b1e3d10edfa174f7af904d310c5e5305e9464ebed5369728c4af891a2'
            '5cf296a809ca049c46cdc0afe8b56650aeed217d28a0f4f4e6a4883f09f277bf'
            '6526e580f0dcae792e25d479f899efbcb719d42c5e26bc8b7f1c62013e758de7'
            'a10ad70335728c66057b62003d525e993e8953d794eb8f57a84172092fd14aa8'
            'd46a79928dc9f641a8a1661ff1e220de1115b5370cd9e25b96d8eb0b24cf3363'
            '0209ccd3580c947221d98656668f91b3685bb1313f4d8c581f806ee39acfa6d0'
            '7ffe4b511d94a301075e22ce03aafceefe83141deb46d729a0f72aa2da62d65f'
            'c72c54daa583872c4718f3dfab9c4b45f34a039384b9cd69df9f053d4ade4089'
            '1172bde2bbda9315d2e136268c030572bd9dbd9331bf128644208fc07c6c783d'
            '21a8ba24035c27e1b48892e62f194258bcb01db65033ef274242b80ba09a9db8'
            'd633a2039877c00302f32738099ee53e0275350a8f73691ecb107fb9735db5a9'
            '461aa0da7de8bda9474797339532304894b55825be34f8c009244da8c00c5b41'
            'a3f85c3c35ee478fd174f8aaa6ca15e5fad8612b42ca4d90cc3ef79b49a99989'
            '45b8a7a87e995bf3cbb79f9008672724527c3794cb51024718faedeb072b674a'
            '64ea8f87d8131841c6d2edec646c08e35bd6965555ff16100725a566186264dc'
            '49b947c76b8c4d17fed80a45342e43e4bbd1c2085a43b43c237a8a0d27a51e74'
            'df5c98b5719b97accbee16d387b81781cd9694801cf1f1d831fdf5069942fda1'
            'ed41c98da84dc0003777edca3101d4923be76701d6b494cd7c512a4da39de710'
            'b54af31bf32ea47dd47c48113481cc3288c04d844f5b4814663b108f43f415a7'
            '1e1dc0c380fcfadfe46d396f3efade08c90f53d74fac7037edcfe9bc0a3c8d56'
            '6a6345d662198a93c44a55283140a2ce6ac24e591df697cac6ada2c92e841229'
            'c3f0eaa8611fc032c12b5c2349a69c75325cba6df2e4e2665beeda3c6b5445d7'
            'd3e605552ce4d1649e23dc2bcffcd98d9d14b23ac836b6218e7a672b45921477'
            '3a6631bed87b2e0beb66bb0c526ebe4e8d5dae6d61038a97b465ce2e9907c635'
            '6bb949a6be487f6b88b0d990268ca389ecd45dd1740d75a98166aa5007f94dcf'
            '6c77e8e9efee374c6a455340daf469aa70063ae322f763553b3b29e895fa2103'
            'b3cc051f70e49241a429e068e64f304a413f7fe99517d24e444d50c7828c1717'
            '9ac89c475c9cd22b833e19bcc3a3a40dd76fc8713f6d44efe23fd3059c36216b'
            '58884aeef2ae286ab935e6b45bf71c4af3aa79e3d97df4e34ec299ee21ac8a5e'
            '14681de36c7bb82f4da2531a6a800e211625f6c93e1949ff5fa4b1b3cd1cf9ee'
            'f21d78c1b5e5a5c072a4e8ea9ea3fed3332a7f57155905a3617d1aac1c7acdff'
            'cbd5d443315932800363d1a8881534ea5982fa730a50ee899e1e50922a5ff6a8'
            '6c0f5bd3e40e30f5c28e70b6995c16be06f938797f21740b04e8cc1e87d68005'
            'a7408d0688f351372527535f097d0cd6896205f5b106105b4ad55c65718bb0c2'
            'f8dee9331938c51812c1a50865753ee143df888eab27f8802f219b5b7208b134'
            'e96975705bbaa1c46bf57798cacae3711f933967b7b1ced8aff6047e10a2d70f'
            '7a1fe72faf184f4481b952616fd7ffa417dc38c0d76d254d166a615afa6e9edc'
            '5dc65b0716f019d61fd1a3de4fa357ab6b94d0d341745271c24903ae4abc76be'
            '57a9cdc870c37e835d46c0a37e7309b50d7d4fa9932f16b7f620f687f3f44171'
            '1cf09a763fbc4605df163e6c8e3a4edb31f1d78176a4c43f2d7abecdd74612f7'
            'db731369ae77265a1bbe610d57b0c73e06b8cd521cde72e4015bd67120115d3b'
            'c97eca2b1c88e6f877fc54f70558bd8fba62011c63440d9cd04947bbe2ac10b1'
            'df54c009b21d1023f10d2983af97f495fda6ec17a53524638929d20687503bef'
            'eeeaeb02bee607e0f38eef48a99b66155dd9a08e5f3d1120e113458e1d9382f0'
            'b1af1ebfbb69d099c056952c7aaab5397472c3bb27f09d4e147a9f182894f4d5'
            'ab6a669878a9649efdfdd68e8fbd6b45d6c77853f188ad312c95b0ca07ba96f0'
            '41cb6ac1f6e080dfb5e5f3551fd1f0e2200d2389b810888d6d6ec7ad28b1a0af'
            '459b26938f90f6f482e1f105d8ede56c11896f3eb8eeb0e9e786d1d036efd55a'
            '643ed747f2cf87e5f448796e7ae7a023c201e798340e56c9c59fb19795924441'
            '9ea5b40d827abdf9796db26301221bd0862a59ff637811760b137f243f9a1532'
            '96657da73ecd3f79f7c34fe305c3e40dd78b0c5db4515b8bcce32b869f9d0e69'
            '1323c92859c848111a35c810e344994f38b94146e5cd61e462fb5d02afaf86b6'
            '3d7ba39b62fc3ab4d80b7c82ae63c5cb2ca443cf0fba1f259b5197543ba630c3'
            '84fcffe99b52b85585fe2287ad6a5a9686eb4af1d028241a45e2d4814c64cf06'
            'a8d9cbfd52189f613dcaa7e24f659aa5707c8f656f2dde6945cdb9abb7c9219b'
            'c420ed01df5462b47a768b04a4eb5216b30173556d9cfb9c3157998a8e69f5ed')

prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${_basekernel}.11"

  # add extended stable patch(es)
  patch -p1 -i "${srcdir}/3.13.11.1.patch"
  patch -p1 -i "${srcdir}/3.13.11.3.patch"
  patch -p1 -i "${srcdir}/3.13.11.4.patch"
  patch -p1 -i "${srcdir}/3.13.11.5.patch"
  patch -p1 -i "${srcdir}/3.13.11.6.patch"
  patch -p1 -i "${srcdir}/3.13.11.7.patch"
  patch -p1 -i "${srcdir}/3.13.11.8.patch"
  patch -p1 -i "${srcdir}/3.13.11.9.patch"
  patch -p1 -i "${srcdir}/3.13.11.10.patch"
  patch -p1 -i "${srcdir}/3.13.11.11.patch"
  patch -p1 -i "${srcdir}/3.13.11.12.patch"
  patch -p1 -i "${srcdir}/3.13.11.13.patch"
  patch -p1 -i "${srcdir}/3.13.11.14.patch"
  patch -p1 -i "${srcdir}/3.13.11.15.patch"
  patch -p1 -i "${srcdir}/3.13.11.16.patch"
  patch -p1 -i "${srcdir}/3.13.11.17.patch"
  patch -p1 -i "${srcdir}/3.13.11.18.patch"
  patch -p1 -i "${srcdir}/3.13.11.19.patch"
  patch -p1 -i "${srcdir}/3.13.11.20.patch"
  patch -p1 -i "${srcdir}/3.13.11.21.patch"
  patch -p1 -i "${srcdir}/3.13.11.22.patch"
  patch -p1 -i "${srcdir}/3.13.11.23.patch"
  patch -p1 -i "${srcdir}/3.13.11.24.patch"
  patch -p1 -i "${srcdir}/3.13.11.25.patch"
  patch -p1 -i "${srcdir}/3.13.11.26.patch"
  patch -p1 -i "${srcdir}/3.13.11.27.patch"
  patch -p1 -i "${srcdir}/3.13.11.28.patch"
  patch -p1 -i "${srcdir}/3.13.11.29.patch"
  patch -p1 -i "${srcdir}/3.13.11.30.patch"
  patch -p1 -i "${srcdir}/3.13.11.31.patch"
  patch -p1 -i "${srcdir}/3.13.11.32.patch"
  patch -p1 -i "${srcdir}/3.13.11.33.patch"
  patch -p1 -i "${srcdir}/3.13.11.34.patch"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git
  # enable only if you have "gen-stable-queue-patch.sh" executed before
  #patch -Np1 -i "${srcdir}/prepatch-${_basekernel}`date +%Y%m%d`"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # allow Checkpoint/restore (for criu) without EXPERT=y
  patch -p1 -i "${srcdir}/criu-no-expert.patch"

  # fix nfs kernel oops
  # http://git.linux-nfs.org/?p=trondmy/linux-nfs.git;a=commitdiff;h=3396f92f8be606ea485b0a82d4e7749a448b013b
  patch -p1 -i "${srcdir}/0004-rpc_pipe-remove-the-clntXX-dir-if-creating-the-pipe-.patch"
  # http://git.linux-nfs.org/?p=trondmy/linux-nfs.git;a=commitdiff;h=e2f0c83a9de331d9352185ca3642616c13127539
  patch -p1 -i "${srcdir}/0005-sunrpc-add-an-info-file-for-the-dummy-gssd-pipe.patch"
  # http://git.linux-nfs.org/?p=trondmy/linux-nfs.git;a=commitdiff;h=23e66ba97127ff3b064d4c6c5138aa34eafc492f
  patch -p1 -i "${srcdir}/0006-rpc_pipe-fix-cleanup-of-dummy-gssd-directory-when-no.patch"

  # Fix symbols: Revert http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=83460ec8dcac14142e7860a01fa59c267ac4657c
  patch -Rp1 -i "${srcdir}/0001-syscalls.h-use-gcc-alias-instead-of-assembler-aliase.patch"

  # Fix i8042 aliases
  patch -p1 -i "${srcdir}/i8042-fix-aliases.patch"

  # Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
  patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

  # add Gentoo patches
  patch -Np1 -i "${srcdir}/1700_enable-thinkpad-micled.patch"
  patch -Np1 -i "${srcdir}/2700_ThinkPad-30-brightness-control-fix.patch"

  # add aufs3 support
  patch -Np1 -i "${srcdir}/aufs3.13-${_aufs}.patch"
  patch -Np1 -i "${srcdir}/aufs3-base.patch"
  patch -Np1 -i "${srcdir}/aufs3-kbuild.patch"
  patch -Np1 -i "${srcdir}/aufs3-loopback.patch"
  patch -Np1 -i "${srcdir}/aufs3-mmap.patch"
  patch -Np1 -i "${srcdir}/aufs3-standalone.patch"
  patch -Np1 -i "${srcdir}/tmpfs-idr.patch"
  patch -Np1 -i "${srcdir}/vfs-ino.patch"
  patch -Np2 -i "${srcdir}/aufs313-3.13.11.14.patch"

  # add BFQ scheduler
  patch -Np1 -i "${srcdir}/0001-block-cgroups-kconfig-build-bits-for-BFQ-${_bfq}.patch"
  patch -Np1 -i "${srcdir}/0002-block-introduce-the-BFQ-${_bfq}-I-O-sched.patch"
  patch -Np1 -i "${srcdir}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${_bfq}.patch"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  cat "${srcdir}/config.aufs" >> ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 .${_subver}-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # normally not needed
  make clean

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux313() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("linux=${pkgver}")
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${_basekernel}-${CARCH}"

  # add kernel version
  if [ "${CARCH}" = "x86_64" ]; then
     echo "${pkgver}-${pkgrel}-MANJARO x64" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  else
     echo "${pkgver}-${pkgrel}-MANJARO x32" > "${pkgdir}/boot/${pkgbase}-${CARCH}.kver"
  fi

  # set correct depmod command for install
  cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
  true && install=${install}.pkg
  sed \
    -e  "s/RELEASE=.*/RELEASE=${pkgver}-${pkgrel}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -e  "s/KERNEL_BASE=.*/KERNEL_BASE=${_basekernel}/g" \
    -e  "s/BASEVER=.*/BASEVER=${_basever}/g" \
    -e  "s/ARCH=.*/ARCH=${CARCH}/g" \
    -i "${startdir}/${install}"

  # install mkinitcpio preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
  sed \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${_basekernel}-${CARCH}\"|g" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${_basekernel}-${CARCH}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${_basekernel}-${CARCH}-fallback.img\"|g" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--MANJARO}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--MANJARO}/version"

  # Now we call depmod...
  depmod -b "${pkgdir}" -F System.map "${_kernver}"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "${pkgdir}/lib" "${pkgdir}/usr/"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux" 
}

package_linux313-headers() {
  pkgdesc="Header files and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  provides=("linux-headers=$pkgver")

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${srcdir}/linux-${_basekernel}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/.config"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/lib/modules/${_kernver}/build"
  cp -a scripts "${pkgdir}/usr/lib/modules/${_kernver}/build"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/.tmp_versions"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel/"

  # add headers for lirc package
  # pci
  for i in bt8xx cx88 saa7134; do
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/pci/${i}"
    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/pci/${i}"
  done
  # usb
  for i in cpia2 em28xx pwc sn9c102; do
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/${i}"
    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/${i}"
  done
  # i2c
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c"
  cp drivers/media/i2c/*.h  "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
  for i in cx25840; do
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/${i}"
    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in $(find . -name "Kconfig*"); do
    mkdir -p "${pkgdir}"/usr/lib/modules/${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/${i}"
  done

  chown -R root.root "${pkgdir}/usr/lib/modules/${_kernver}/build"
  find "${pkgdir}/usr/lib/modules/${_kernver}/build" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/lib/modules/${_kernver}/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}
